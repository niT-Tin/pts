// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pastepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PasteServiceClient is the client API for PasteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PasteServiceClient interface {
	Paste(ctx context.Context, in *PasteRequest, opts ...grpc.CallOption) (*PasteResponse, error)
	GetAllPaste(ctx context.Context, in *PasteRequest, opts ...grpc.CallOption) (*PasteResponse, error)
	DeleteAllPaste(ctx context.Context, in *PasteRequest, opts ...grpc.CallOption) (*PasteResponse, error)
}

type pasteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPasteServiceClient(cc grpc.ClientConnInterface) PasteServiceClient {
	return &pasteServiceClient{cc}
}

func (c *pasteServiceClient) Paste(ctx context.Context, in *PasteRequest, opts ...grpc.CallOption) (*PasteResponse, error) {
	out := new(PasteResponse)
	err := c.cc.Invoke(ctx, "/paste.PasteService/Paste", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pasteServiceClient) GetAllPaste(ctx context.Context, in *PasteRequest, opts ...grpc.CallOption) (*PasteResponse, error) {
	out := new(PasteResponse)
	err := c.cc.Invoke(ctx, "/paste.PasteService/GetAllPaste", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pasteServiceClient) DeleteAllPaste(ctx context.Context, in *PasteRequest, opts ...grpc.CallOption) (*PasteResponse, error) {
	out := new(PasteResponse)
	err := c.cc.Invoke(ctx, "/paste.PasteService/DeleteAllPaste", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasteServiceServer is the server API for PasteService service.
// All implementations must embed UnimplementedPasteServiceServer
// for forward compatibility
type PasteServiceServer interface {
	Paste(context.Context, *PasteRequest) (*PasteResponse, error)
	GetAllPaste(context.Context, *PasteRequest) (*PasteResponse, error)
	DeleteAllPaste(context.Context, *PasteRequest) (*PasteResponse, error)
	mustEmbedUnimplementedPasteServiceServer()
}

// UnimplementedPasteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPasteServiceServer struct {
}

func (UnimplementedPasteServiceServer) Paste(context.Context, *PasteRequest) (*PasteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paste not implemented")
}
func (UnimplementedPasteServiceServer) GetAllPaste(context.Context, *PasteRequest) (*PasteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPaste not implemented")
}
func (UnimplementedPasteServiceServer) DeleteAllPaste(context.Context, *PasteRequest) (*PasteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllPaste not implemented")
}
func (UnimplementedPasteServiceServer) mustEmbedUnimplementedPasteServiceServer() {}

// UnsafePasteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PasteServiceServer will
// result in compilation errors.
type UnsafePasteServiceServer interface {
	mustEmbedUnimplementedPasteServiceServer()
}

func RegisterPasteServiceServer(s grpc.ServiceRegistrar, srv PasteServiceServer) {
	s.RegisterService(&PasteService_ServiceDesc, srv)
}

func _PasteService_Paste_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasteServiceServer).Paste(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paste.PasteService/Paste",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasteServiceServer).Paste(ctx, req.(*PasteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasteService_GetAllPaste_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasteServiceServer).GetAllPaste(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paste.PasteService/GetAllPaste",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasteServiceServer).GetAllPaste(ctx, req.(*PasteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasteService_DeleteAllPaste_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasteServiceServer).DeleteAllPaste(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paste.PasteService/DeleteAllPaste",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasteServiceServer).DeleteAllPaste(ctx, req.(*PasteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PasteService_ServiceDesc is the grpc.ServiceDesc for PasteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PasteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paste.PasteService",
	HandlerType: (*PasteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Paste",
			Handler:    _PasteService_Paste_Handler,
		},
		{
			MethodName: "GetAllPaste",
			Handler:    _PasteService_GetAllPaste_Handler,
		},
		{
			MethodName: "DeleteAllPaste",
			Handler:    _PasteService_DeleteAllPaste_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paste.proto",
}
